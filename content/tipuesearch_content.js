var tipuesearch = {"pages": [{'title': 'About', 'text': 'cmsimde_site \n Warehousing： 40923206 Website： 40923206 \n', 'tags': '', 'url': 'About.html'}, {'title': 'class link', 'text': '設計二乙 \n Group1 \xa0 \xa0 \xa0 \xa0 cd2022bg1 \n \n \n \n \n team member \n \n \n website \n \n \n warehousing \n \n 分組倉儲 \n \n \n 40923201 \n 40923201 \n 40923201 \n 40923201 \n \n \n \n 40923205\xa0 (組長) \n \n 40923205 \n 40923205 \n 40923205 \n \n \n 40923208 \n 40923208 \n 40923208 \n 40923208 \n \n \n 40923210 \n 40923210 \n 40923210 \n 40923210 \n \n \n 40923217 \n 40923217 \n 40923217 \n 40923217 \n \n \n 40923230 \n 40923230 \n 40923230 \n 40923230 \n \n \n 40923231 \n 40923231 \n 40923231 \n 40923231 \n \n \n 40923235 \n 40923235 \n 40923235 \n 40923235 \n \n \n \n \n Group2 \xa0 \xa0 \xa0 cd2022bg2 \n \n \n \n \n team member \n \n \n website \n \n \n warehousing \n \n 分組倉儲 \n \n \n 40823215 \n 40823215 \n 40823215 \n 40823215 \n \n \n 40923203 \n 40923203 \n 40923203 \n 40923203 \n \n \n 40923204 \n 40923204 \n 40923204 \n 40923204 \n \n \n 40923207 \n 40923207 \n 40923207 \n 40923207 \n \n \n 40923209 \n 40923209 \n 40923209 \n 40923209 \n \n \n 40923213 \n 40923213 \n 40923213 \n 40923213 \n \n \n 40923220 \n 40923220 \n 40923220 \n 40923220 \n \n \n 40923240\xa0 (組長) \n 40923240 \n 40923240 \n 40923240 \n \n \n \n \n Group3 \xa0 \xa0\xa0 cd2022bg3 \n \n \n \n \n team member \n \n \n website \n \n \n warehousing \n \n 分組倉儲 \n \n \n 40923206 \n 40923206 \n 40923206 \n 40923206 \n \n \n 40923224 \n 40923224 \n 40923224 \n 40923224 \n \n \n 40923226 \n 40923226 \n 40923226 \n 40923226 \n \n \n 40923242 \n 40923242 \n 40923242 \n 40923242 \n \n \n 40923245 \n 40923245 \n 40923245 \n 40923245 \n \n \n 40923247 \n 40923247 \n 40923247 \n 40923247 \n \n \n 40923249 \n 40923249 \n 40923249 \n 40923249 \n \n \n 40923252\xa0 (組長) \n 40923252 \n 40923252 \n 40923252 \n \n \n \n \n Group4 \xa0 \xa0 \xa0 cd2022bg4 \n \n \n \n \n team member \n \n \n website \n \n \n warehousing \n \n 分組倉儲 \n \n \n 40923211 \n 40923211 \n 40923211 \n 40923211 \n \n \n 40923218 \n 40923218 \n 40923218 \n 40923218 \n \n \n 40923221 \n 40923221 \n 40923221 \n 40923221 \n \n \n 40923223 \n 40923223 \n 40923223 \n 40923223 \n \n \n 40923227\xa0 (組長) \n 40923227 \n 40923227 \n 40923227 \n \n \n 40923238 \n 40923238 \n 40923238 \n 40923238 \n \n \n 40923243 \n 40923243 \n 40923243 \n 40923243 \n \n \n 40623143 \n 40623143 \n 40623143 \n 40623143 \n \n \n 40723146 \n 40723146 \n 40723146 \n 40723146 \n \n \n \n \n Group5 \xa0 \xa0 \xa0 cd2022bg5 \n \n \n \n \n team member \n \n \n website \n \n \n warehousing \n \n 分組倉儲 \n \n \n 40923212 \n 40923212 \n 40923212 \n 40923212 \n \n \n 40923229 \n 40923229 \n 40923229 \n 40923229 \n \n \n 40923233 \n 40923233 \n 40923233 \n 40923230 \n \n \n 40923234 \n 40923234 \n 40923234 \n 40923234 \n \n \n 40923237 \n 40923237 \n 40923237 \n 40923237 \n \n \n 40923251\xa0 (組長) \n 40923251 \n 40923251 \n 40923251 \n \n \n 40923253 \n 40923253 \n 40923253 \n 40923253 \n \n \n 40971220 \n 40971220 \n 40971220 \n 40971220 \n \n \n \n \n Group6 \xa0 \xa0 \xa0 cd2022bg6 \n \n \n \n \n team member \n \n \n website \n \n \n warehousing \n \n 分組倉儲 \n \n \n 40723217\xa0 (組長) \n 40723217 \n 40723217 \n 40723217 \n \n \n 40923219 \n 40923219 \n 40923219 \n 40923219 \n \n \n 40923225 \n 40923225 \n 40923225 \n 40923225 \n \n \n 40923232 \n 40923232 \n 40923232 \n 40923232 \n \n \n 40923236 \n 40923236 \n 40923236 \n 40923236 \n \n \n 40923241 \n 40923241 \n 40923241 \n 40923241 \n \n \n 40923246 \n 40923246 \n 40923246 \n 40923246 \n \n \n 40923250 \n 40923250 \n 40923250 \n 40923250 \n \n \n \n \n Group7 \xa0 \xa0\xa0cd2022bg7 \n \n \n \n \n team member \n \n \n website \n \n \n warehousing \n \n 分組倉儲 \n \n \n 40723134 \n 40723134 \n 40723134 \n 40723134 \n \n \n 40723136 \n 40723136 \n 40723136 \n 40723136 \n \n \n 40732331 \n 40732331 \n 40732331 \n 40732331 \n \n \n 40923214 \n 40923214 \n 40923214 \n 40923214 \n \n \n 40923216 \n 40923216 \n 40923216 \n 40923216 \n \n \n 40923228 \n 40923228 \n 40923228 \n 40923228 \n \n \n 40923248 \n 40923248 \n 40923248 \n 40923248 \n \n \n \n', 'tags': '', 'url': 'class link.html'}, {'title': 'Weekly tasks', 'text': '', 'tags': '', 'url': 'Weekly tasks.html'}, {'title': 'w2', 'text': '', 'tags': '', 'url': 'w2.html'}, {'title': 'w3', 'text': '此次所分配到的影片為第七到第十二 \n 第七： \n TECH 4472 - Homework 03B - Expressions (Continued) \n 影片連結 \n \n 第八：TECH 4472 Homework 4 - AC Connector Nut \n 影片連結 \n \n \n  接下來將 mp4 檔案從 downloads 目錄取出  \n \n \n \n   \n \n \n \n \n \n \n \n \n --------------------------------------------------------------------------------------------------------------- \n \n 第九： TECH 4472 Homework 5A - Box \n 影片連結 \n 第十： TECH 4472 Homework 5B - Master Model Drawing \n 影片連結 \n 第十一： 4472 Lab 2 - Trial Head \n 影片連結 \n 第十二： 4472 HW06 Datums and Layers \n 影片連結 \n', 'tags': '', 'url': 'w3.html'}, {'title': 'w6', 'text': '學習"Leo Editor"編寫，創建個人blog，完成查驗項目。 \n W6 blog 連結 \n \n', 'tags': '', 'url': 'w6.html'}, {'title': 'w7', 'text': '在系上網段, 可直接從\xa0 http://wcm.cycu.org:88 \xa0 下載. compile_copsim_cd2022.7z \n 將自己的倉儲 \xa0 git clone --recurse-submodules 倉儲網址 \xa0到compile_copsim_cd2022\\data\\tmp中， \n \n 接著跟著 W7任務 的步驟開始執行。 \n 1. git clone\xa0 https://github.com/mdecourse/scarysim.git \n \n 2.修改  scarysim.pro , 蓋掉第 11 行, 成為  #  LIBS\xa0\xa0\xa0\xa0 += -lglut -lGLU \n \n 3. cd scarysim \n \n 4. qmake -o Makefile scarysim.pro \n \n 5. mingw32-make -f Makefile.Release  可以在 release 目錄取得 scarysim.exe \n \n 6. 將  scarysim.exe  移至 倉儲根目錄 , 並且需要 msys64_20210419\\mingw64\\bin 路徑中的 dll 動態連結程式庫配合執行.新創一個  scarysim.bat 。 \n \n scarysim.bat 內容為下圖所示(找到自己檔案所在位置並複製檔案路徑) \n \n 更改後開啟\xa0 scarysim.bat  可顯示下圖紅框所示 \n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w8', 'text': '流程與心得簡報： w8繪圖分配到Onshape進行繪製，先將老師的圖檔下載並解壓縮，而後將圖檔開啟並測量尺寸進行繪圖，有些並不會影響之後步驟，所以並無逐一進行繪製，將繪製完成的零件與成員一同進行組裝，花了一些時間將其組裝完畢。CoppeliaSim的使用由於上學期使用過，較不陌生，但在裝軸還是需花上時間才完成。 \n 查驗項目: \n \n uarm 各零件工程圖 \n uarm 組合圖 \n uarm 組合圖 STL 格式轉入 CoppeliaSim \n GUI slider 控制前三軸作動 \n cmsimde 中第一階頁面, 標題為 midterm \n 網誌名稱為 midterm.html \n 流程與心得簡報 \n \n 1.一部分繪圖過程 \n \n \n  接下來將 mp4 檔案從 downloads 目錄取出  \n \n \n \n   \n \n \n \n \n \n \n \n \n \n 2.一部分組裝過程 \n \n \n  接下來將 mp4 檔案從 downloads 目錄取出  \n \n \n \n   \n \n \n \n \n \n \n \n \n \n 3.4.轉入 CoppeliaSim,控制前三軸作動 \n \n  接下來將 mp4 檔案從 downloads 目錄取出  \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w8.html'}, {'title': 'w10', 'text': 'sustainable(可持續使用，永續)：這個方法不錯，可以在團隊間推廣，並且一用再用，或可持續改進。 \n resilience(應變能力，韌性)：面對(客戶或團隊成員)的需求或情境改變之後，仍能因應處理，順利達成目標(登峰造極或存活下來)。 \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w10_block_ui', 'text': '\n \n  接下來將 mp4 檔案從 downloads 目錄取出  \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w10_block_ui.html'}, {'title': 'w10_nx_integ', 'text': '\n \n  接下來將 mp4 檔案從 downloads 目錄取出  \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w10_nx_integ.html'}, {'title': 'w10_ssh', 'text': '\n \n  接下來將 mp4 檔案從 downloads 目錄取出  \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w10_ssh.html'}, {'title': 'w11', 'text': 'w11s1 \n \n \n  接下來將 mp4 檔案從 downloads 目錄取出  \n \n \n \n   \n \n \n \n \n \n \n \n \n \n W8 負責 Onshape相關工作 \n \n uarm 各零件工程圖 \n uarm 組合圖 \n uarm 組合圖 STL 格式轉入 CoppeliaSim \n GUI slider 控制前三軸作動 \n cmsimde 中第一階頁面, 標題為 midterm \n 網誌名稱為 midterm.html \n 流程與心得簡報 \n \n W10\xa0 以 w10_block_ui、w10_nx_integ 與 w10_ssh製作Wink \n \n 下載 w10_block_ui.wnk \n 利用 Wink 開啟專案 \n 在各頁面加入說明標註 \n 若有其他附加頁面, 則需縮至 1008x630 後插入適當位置 \n 完成後轉出對應的 mp4 放入頁面與網誌 \n \n 40923206的心得：W 8繪圖分配到Onshape進行繪製，先將 圖檔下載並解壓縮，而後將圖檔開啟並測量尺寸進行繪圖，將繪製完成的零件與同組成員一同進行組裝，花了一些時間將其組裝完畢。CoppeliaSim也是與組員一同進行工作，雖然上學期使用過，但在連接、裝軸的擺放上還是用了許多的時間完成。W10工作是下載老師的Wink進行註解，但自己還是自行錄製了第一及第三個影片來進行說明的部分。 \n', 'tags': '', 'url': 'w11.html'}, {'title': 'w12', 'text': '\n cd2022_uarm_nx12_imported.7z \xa0 中, 若計入重複引用的零件, 總數有多少? 請列出組成此一 uarm 機械手臂所需的 BOM 列表. \n 若不計入重複引用的零件, 總數有多少? 請列出各零件名稱. \n 當執行機械手臂的設計過程中, 若已知各零件所擬採用的零件材料密度, 請問此一設計中的 uarm 機械手臂的淨重量為多少? ( uArm-Swift-Specifications.pdf ) \n 當執行機械手臂設計與製程規劃時, 若已知各零件擬採行的製造程序、取得方法與所需時間及成本, 請問此一設計中的 uarm 機械手臂, 該如何計算一定數量需求下, 需花費多少時間? 如何計算成本? \n \n 檔案下載：\xa0 w12_2a.py \n NXOpen Python API 讀取零件物理性質的程式:\xa0 get_part_list_from_assembly4.py \n \n', 'tags': '', 'url': 'w12.html'}, {'title': 'online', 'text': '線上同步教學系統: https://teams.microsoft.com \xa0(請利用 @gm \xa0 註冊帳號 後, 每週透過 Team code 進入 channel 上課) \n Office 365 教育版連結: https://www.microsoft.com/zh-tw/education/products/office \n 線上教學訊息發布區:\xa0 https://gitter.im/mdecourse/cd2022 \n \n', 'tags': '', 'url': 'online.html'}, {'title': 'w13', 'text': '老師網站連結 \n \n cd2022_w13_2b_part1.mp4 \xa0 (NX 與 CoppeliaSim 整合應用項目說明) \n \n cd2022_w13_2b_part2.mp4 \xa0 (uArm 主體零件工程圖取尺寸流程說明) \n \n \n cd2022_w13_2b_part3.mp4 \xa0 (說明如何在線上讀取各學員每週任務進度) \n \n \n ------------------------------------------------------------------------------------------------------- \n NX 與 CoppeliaSim 整合應用項目說明 \n prt 是 NX 的零組件檔案格式, 而 simscene.xml 則是 CoppeliaSim 的機電模擬場景格式. 目前並沒有直接從 NX 將組立件轉為 simscene.xml 的工具, 但 NXOpen API 中的 Python 延伸程式提供製作此一工具的可能性, 只是我們必須充分理解 NX 組立件與 CoppeliaSim 套件的檔案格式細節. \n 上述從一套 MCAD 將零組件以 STL 或其他格式轉出, 然後以特定格式轉進另一套 CAD, CAE 或 CAM 的流程基本上具有相似的難度, 都必須充分了解兩套軟體間的檔案格式內容, 並運用程式方法或 API 延伸程式方法, 嘗試強化產品開發過程中的工作效能. \n 由於我們可以看到 CoppeliaSim 的原始碼, 並且有能力自行編譯 CoppeliaSim 主體程式與延伸程式庫, 而且從 CoppeliaSim 場景轉出的完整 simscene.xml, 能夠看出場景中各元件的配置與整合方式. 但 NX 方在無法進入官方付費論壇的情況下, 就只能從殘缺的範例中尋找答案. \n 我們將先從簡單的 MTB 機械手臂的 Pick and Place 工作流程下手， \n 以 NX 繪製 MTB 機械手臂組立件 → 從 NX 轉出帶零件檔名的 MTB 組立件 STL → \n 自行縮放並進行 MTB STL零組件座標轉換運算 → 分析 simscene.xml 的零組件樹狀架構 → \n 從零件 STL 自行組出 simscene.xml 檔案 → 將控制程式碼納入 simscene.xml 檔案 → \n 測試並歸納結論 \n uArm 主體零件工程圖 \n 底座蓋： \n \n 底座中間： \n \n 說明如何在線上讀取各學員每週任務進度 \n 在線上讀取各學員每週任務進度之 程式 \n from browser import html\nfrom browser import document\n\nbrython_div = document["brython_div"]\n\n# 根據 href 與 content 將 html 元件中的 anchor 插入頁面\ndef makeLink(href, content):\n    brython_div <= html.A(content, href=href)\n    brython_div <= html.BR()\n\n# 將 2b 學號、帳號與組別的網址設為 studlist_url\naorb = "2b"\npage_title = "online"\nstudlist_url = "https://mde.tw/studlist/2022spring/" + aorb + ".txt"\n# 利用 open() 與 read() 讀出資料\ndata = open(studlist_url).read()\n# 若要 debug 可以查驗所取得的 data 內容\n#print(data)\n# 利用 split() 函式, 使用每一行的跳行符號\\n切割所讀回的資料\n# 切割後的 stud 為數列 (list)\nstud = data.split("\\n")\n# 列出去頭(標題)與去尾(空白行)的數列查驗\n#print(stud[1:-1])\ncount = 0\n# blog name w6_studno.html\nmember = []\n# 利用 for 迴圈逐一取出數列中的元素(每位學員的資料)\nfor i in stud[1:-1]:\n    #print(i)\n    studno, github, grp = i.split("\\t")\n    #print(studno, github, grp)\n    #print(type(grp))\n    stud_url = "https://" + github + ".github.io/cd2022/content/" + page_title + ".html"\n    url_title = studno + " " + page_title\n    try:\n        blog_content = open(stud_url).read()\n        makeLink(stud_url, url_title)\n    except:\n        #print(studno + " 尚無 w6 blog!")\n        pass\n    #makeLink(stud_url, url_title)\n    # 因為有人沒有組別或沒有登記 github 帳號\n    if grp != "" and github != "":\n        if grp == "1":\n            #print(studno)\n            count += 1\n    else:\n        print("尚未分組者:", studno)\n        \nprint("done") \n \n', 'tags': '', 'url': 'w13.html'}, {'title': 'w14', 'text': '2b: \n \n 2b_w14_part1.mp4 \xa0 (說明如何利用 Leo Editor 與 Python 編寫 CoppeliaSim 場景中的控制程式, \xa0 w14_copsim_py_leo_ttt.7z ) \n 2b_w14_part2.mp4 \xa0 (說明如何利用 Lua 編寫 MTB robot 機械手臂的控制程式) \n 2b_w14_part3.mp4 \xa0 (說明如何利用 Lua 引入 suctionpad component 執行物件吸取與釋放) \n \n coppeliaSim 4.3.0 下載： CoppeliaSim 4.3.0 rev3 \xa0 \n MTB-40923206相關檔案下載： 40923206-MTB.zip \n \n 導入外部 Python 程式碼: \n #python\n# 導入與 .ttt 相同目錄的 external_python.py\ninclude external_python \n external_python.py 內容: \n \'\'\'\n#在 CoppeliaSim cube nonthreaded script 內容, 宣告使用 python 語法, 且導入\n#外部 external_python.py 程式碼\n \n#python\n \ninclude external_python\n\'\'\'\nimport math\n \ndef sysCall_init():\n    print("From non-threaded Python child script, sysCall_init")\n    # 因為在函式內改變全域變數 cube 的值, 必須宣告為 global\n    global cube\n    # 取得 script 所在物件, 與 cube 變數對應\n    cube=sim.getObject(\'.\')\n    global pos\n    pos=sim.getObjectPosition(cube,-1)\n    global deg, theta\n    deg = math.pi/180.\n    theta = 0\n     \ndef sysCall_actuation():\n    print("From non-threaded Python child script, sysCall_actuation")\n    global theta\n    # 順時鐘繞行\n    theta = theta - 0.01\n    # 以 (pos[0]-1, pos[1]) 為圓心, 半徑 1m 繞行\n    pos[0] = math.cos(theta)-1\n    print(pos[0])\n    pos[1] = math.sin(theta)\n    print(pos[1])\n    #pos[1]=pos[1]+0.01\n    sim.setObjectPosition(cube,-1,pos)\n     \ndef sysCall_sensing():    \n    print("From non-threaded Python child script, sysCall_sensing")\ndef sysCall_cleanup():\n    print("From non-threaded Python child script, sysCall_cleanup") \n 以鍵盤控制 MTB_nx robot (for CoppeliaSim 4.3.0): \n function sysCall_init() \n    axis1=sim.getObject(\'/joint1\')\n    axis2=sim.getObject(\'/joint2\')\n    axis3=sim.getObject(\'/joint3\')\n    suctionPad=sim.getObject(\'/suctionPad\')\n    MTB_Robot=sim.getObject("/base")\n    BaseFrame=sim.getObject("/BaseFrame")\n    block =sim.getObject("/block")\n    rotation1 = 0\n    distance3 = 0\n    deg = math.pi/180.\nend\n \n \nfunction sysCall_actuation() \n--[[\n    rotation1 = rotation1 + 0.5*deg\n    print(rotation1)\n    sim.setJointPosition(axis1, -rotation1)\n    sim.setJointPosition(axis2, -rotation1)\n]]\n \n    message, auxiliaryData=sim.getSimulatorMessage()\n        while message ~= -1 do\n            key=auxiliaryData[1]\n            sim.addStatusbarMessage(\'user press key:\'..key)\n            if (message==sim.message_keypress) then\n               --if (auxiliaryData[1]==112) then --p activate the suction pad\n                if (auxiliaryData[1]==string.byte(\'p\')) then\n                    -- if key p pressed activate the suction mode\nsim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'true\')\n                end -- if p\n                if (auxiliaryData[1]==113) then --q deactivate the suction pad\n                    -- if key q pressed deactivate the suction mode\nsim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'false\')\n                end -- if q\n                if (auxiliaryData[1]==114) then --r right turn in degree\n                    -- if key r pressed axis1 angle adds 5 degrees\n                     rotation1 = rotation1 + 5*deg\n                     sim.setJointPosition(axis1, rotation1)\n                end -- if r\n                if (auxiliaryData[1]==108) then --l left turn in degree\n                    -- if key l pressed axis1 angle substract 5 degrees\n                     rotation1 = rotation1 - 5*deg\n                     sim.setJointPosition(axis1, rotation1)\n                end -- if l\n                if (auxiliaryData[1]==100) then --d suction pad down\n                    -- if key d pressed axis3 will down 0.01 m\n                     distance3 = distance3 + 0.01\n                     sim.setJointPosition(axis3, distance3)\n                end -- if d\n                if (auxiliaryData[1]==117) then --u suction pad up\n                    -- if key u pressed axis3 will up 0.01 m\n                     distance3 = distance3 - 0.01\n                     sim.setJointPosition(axis3, distance3)\n                end -- if u\n                if (auxiliaryData[1]==99) then --c coordinate of block\n                    --blockPosition = sim.getObjectPosition(block, BaseFrame)\n                    blockPosition = sim.getObjectPosition(suctionPad, BaseFrame)\n                    sim.addStatusbarMessage("coordinate:"..table_to_string(blockPosition))\n                end --if c\n           end  -- if\n    message, auxiliaryData=sim.getSimulatorMessage()\n        end -- while\nend -- function\nfunction sysCall_sensing() \n--[[\n    -- Read Proximity sensor (0= nothing detected, 1 = object detected)\n    local res = sim.readProximitySensor(proximity)\n \n    -- Check if possible to insert an new box\n    if (sim.getSimulationTime()-T_last_inserted > T_insert) and not hasStopped then\n        insertBox()\n    end\n \n    -- If proximity sensor detects an object, stop the belt, stop inserting objects\n    if res == 1 and not hasStopped then\n        if boolList[1] then\n            sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",0)\n            deltaTime = sim.getSimulationTime()-T_last_inserted\n            hasStopped = true\n        else\n            local box = table.remove(boxList,1)\n            local boxDummy = table.remove(boxDummyList,1)\n            table.remove(boolList,1)\n \n            sim.removeObject(box)\n            sim.removeObject(boxDummy)\n        end\n    end\n \n    -- If proximity sensor detects nothing and belt has stopped, start belt, continue inserting\n    if res == 0 and hasStopped then\n        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)\n        hasStopped = false\n        T_last_inserted = sim.getSimulationTime()-deltaTime\n    end\n     \n]]--\nend\nfunction sysCall_cleanup() \nend\n-- Convert a lua table into a lua syntactically correct string\nfunction table_to_string(tbl)\n    local result = "{"\n    for k, v in pairs(tbl) do\n        -- Check the key type (ignore any numerical keys - assume its an array)\n        if type(k) == "string" then\n            result = result.."[\\""..k.."\\"]".."="\n        end\n \n        -- Check the value type\n        if type(v) == "table" then\n            result = result..table_to_string(v)\n        elseif type(v) == "boolean" then\n            result = result..tostring(v)\n        else\n            v = round(v, 4)\n            result = result.."\\""..v.."\\""\n        end\n        result = result..","\n    end\n    -- Remove leading commas from the result\n    if result ~= "" then\n        result = result:sub(1, result:len()-1)\n    end\n    return result.."}"\nend\nfunction round(x, n)\n    n = math.pow(10, n or 0)\n    x = x * n\n    if x >= 0 then x = math.floor(x + 0.5) else x = math.ceil(x - 0.5) end\n    return x / n\nend\n \n \nfunction insertBox()\n    -- Generate random numbers\n    local rand1 = math.random()\n    local rand2 = math.random()\n    local rand3 = math.random()\n    -- Generate random disturbances on position and orientation\n    local dx = (2*rand1-1)*0.1\n    local dy = (2*rand2-1)*0.1\n    local dphi = (2*rand3-1)*0.5\n    local disturbedCoordinates = {0,0,0}\n    disturbedCoordinates[1] = insertCoordinate[1]+dx\n    disturbedCoordinates[2] = insertCoordinate[2]+dy\n    disturbedCoordinates[3] = insertCoordinate[3]\n    -- Copy and paste box and boxDummy\n    local insertedObjects = sim.copyPasteObjects({box,boxDummy},0)\n    -- Update last inserted box time\n    T_last_inserted = sim.getSimulationTime()\n    -- Move and rotate\n    sim.setObjectPosition(insertedObjects[1],-1,disturbedCoordinates)\n    sim.setObjectOrientation(insertedObjects[1],-1,{0,0,dphi})\n    -- Store handles to boxes and dummies\n    table.insert(boxList,insertedObjects[1])\n    table.insert(boxDummyList,insertedObjects[2]) \n    -- Decide if object is good or bad\n    local decision = math.random() \n    if decision <= goodPercentage then\n    -- Object is good, assign goodColor\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,goodColor)\n        table.insert(boolList,true)\n    else\n    -- Object is bad, assign random color\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,{rand1,rand2,rand3})\n        table.insert(boolList,false)\n    end\nend\n \n \n', 'tags': '', 'url': 'w14.html'}, {'title': 'w15', 'text': 'cd2022_w15_2b_part1.mp4 \xa0 ( Coppeliasim remote API in Python) \n uarm 場景 in IK mode: \xa0 https://www.coppeliarobotics.com/helpFiles/en/inverseKinematicsTutorial.htm \n 目前必須透過程式設定才能使用 IK Dummy 聯立求解. \n Reference: \xa0 https://www.youtube.com/watch?v=o8l-p4DhP7M \n 方向鍵編號: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n \n \n \n if   (auxiliaryData[1]==119)  then \n \xa0\xa0\xa0\xa0 -- up key \n if \xa0  (auxiliaryData[1]==115)  then \n \xa0\xa0\xa0\xa0 -- down key \n if \xa0  (auxiliaryData[1]==100)  then \n \xa0\xa0\xa0\xa0 -- right key  \n if \xa0  (auxiliaryData[1]==97)  then \n \xa0\xa0\xa0\xa0 -- left key \n \n \n \n \n \n \n \n \n \n \n \n  接下來將 mp4 檔案從 downloads 目錄取出  \n \n \n \n   \n \n \n \n \n \n \n \n \n \n \n CoppeliaSim程式碼 \n function sysCall_init()\n    axis1=sim.getObject(\'./joint1\')\n    axis2=sim.getObject(\'./joint2\')\n    axis3=sim.getObject(\'./joint3\')\n    suctionPad=sim.getObject(\'/suctionPad\')\n    rotation1 = 0\n    rotation2 = 0\n    rotation3 = 0\n    deg = math.pi/180.\n    enableSuctionPad(true)\nend\nfunction enableSuctionPad(enable)\n    -- use the suctionPad object to pass the variable activity value\n    -- if enable = true, the activity = \'on\'\n    if enable then\n        sim.writeCustomDataBlock(suctionPad,\'activity\',\'on\')\n    else\n        sim.writeCustomDataBlock(suctionPad,\'activity\',\'off\')\n    end\nend\nfunction sysCall_actuation() \n--[[\n    rotation1 = rotation1 + 1*deg\n    print(rotation1)\n    sim.setJointPosition(axis1, -rotation1)\n    sim.setJointPosition(axis2, -rotation1)\n]]\n    message, auxiliaryData=sim.getSimulatorMessage()\n    while message ~= -1 do\n        key=auxiliaryData[1]\n        sim.addStatusbarMessage(\'user press key:\'..key)\n        if (message==sim.message_keypress) then\n           --if (auxiliaryData[1]==112) then --p activate the suction pad\n            if (auxiliaryData[1]==string.byte(\'p\')) then\n                -- if key p pressed activate the suction mode\n--sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'true\')\n                enableSuctionPad(true)\n            end -- if p\n            if (auxiliaryData[1]==string.byte(\'q\')) then --q deactivate the suction pad\n                -- if key q pressed deactivate the suction mode\n--sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'false\')\n                enableSuctionPad(false)\n            end -- if q\n            if (auxiliaryData[1]==string.byte(\'k\')) then --k right turn in degree\n                -- if key k pressed axis1 angle adds 2 degrees\n                 rotation1 = rotation1 + 2*deg\n                 --sim.setJointPosition(axis1, rotation1)\n                 sim.setJointTargetPosition(axis1, rotation1)\n            end -- if k\n            if (auxiliaryData[1]==string.byte(\'l\')) then --l left turn in degree\n                -- if key l pressed axis1 angle substract 2 degrees\n                 rotation1 = rotation1 - 2*deg\n                 --sim.setJointPosition(axis1, rotation1)\n                 sim.setJointTargetPosition(axis1, rotation1)\n            end -- if l\n-- for joint2 start ##########################################################\n            if (auxiliaryData[1]== string.byte("h")) then --r right turn in degree\n                -- if key r pressed axis1 angle adds 2 degrees\n                 rotation2 = rotation2 + 1*deg\n                 --sim.setJointPosition(axis2, rotation2)\n                 sim.setJointTargetPosition(axis2, rotation2)\n            end -- if k\n            if (auxiliaryData[1]==string.byte("j")) then\n                -- if key j pressed axis2 angle substract 2 degrees\n                 rotation2 = rotation2 - 1*deg\n                 --sim.setJointPosition(axis2, rotation2)\n                 sim.setJointTargetPosition(axis2, rotation2)\n            end -- if j\n-- for joint2 end ##########################################################\n-- for joint3 start ##########################################################\n            if (auxiliaryData[1]== string.byte("f")) then\n                -- if key f pressed axis3 angle adds 2 degrees\n                 rotation3 = rotation3 + 1*deg\n                 --sim.setJointPosition(axis3, rotation3)\n                 sim.setJointTargetPosition(axis3, rotation3)\n            end -- if f\n            if (auxiliaryData[1]==string.byte("g")) then\n                -- if key g pressed axis3 angle substract 2 degrees\n                 rotation3 = rotation3 - 1*deg\n                 --sim.setJointPosition(axis3, rotation3)\n                 sim.setJointTargetPosition(axis3, rotation3)\n            end -- if g\n-- for joint3 end ##########################################################\n            if (auxiliaryData[1]==99) then --c coordinate of block\n                blockPosition = sim.getObjectPosition(block, BaseFrame)\n                sim.addStatusbarMessage("coordinate:"..table_to_string(blockPosition))\n            end --if c\n       end  -- if\n    message, auxiliaryData=sim.getSimulatorMessage()\n    end -- while\nend -- function\n\nfunction sysCall_sensing() \n--[[\n    -- Read Proximity sensor (0= nothing detected, 1 = object detected)\n    local res = sim.readProximitySensor(proximity)\n\n    -- Check if possible to insert an new box\n    if (sim.getSimulationTime()-T_last_inserted > T_insert) and not hasStopped then\n        insertBox()\n    end\n\n    -- If proximity sensor detects an object, stop the belt, stop inserting objects\n    if res == 1 and not hasStopped then\n        if boolList[1] then\n            sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",0)\n            deltaTime = sim.getSimulationTime()-T_last_inserted\n            hasStopped = true\n        else\n            local box = table.remove(boxList,1)\n            local boxDummy = table.remove(boxDummyList,1)\n            table.remove(boolList,1)\n\n            sim.removeObject(box)\n            sim.removeObject(boxDummy)\n        end\n    end\n\n    -- If proximity sensor detects nothing and belt has stopped, start belt, continue inserting\n    if res == 0 and hasStopped then\n        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)\n        hasStopped = false\n        T_last_inserted = sim.getSimulationTime()-deltaTime\n    end\n    \n]]--\nend\nfunction sysCall_sensing()\n    -- put your sensing code here\nend\nfunction sysCall_cleanup()\n    -- do some clean-up here\nend\n-- Convert a lua table into a lua syntactically correct string\nfunction table_to_string(tbl)\n    local result = "{"\n    for k, v in pairs(tbl) do\n        -- Check the key type (ignore any numerical keys - assume its an array)\n        if type(k) == "string" then\n            result = result.."[\\""..k.."\\"]".."="\n        end\n        -- Check the value type\n        if type(v) == "table" then\n            result = result..table_to_string(v)\n        elseif type(v) == "boolean" then\n            result = result..tostring(v)\n        else\n            v = round(v, 4)\n            result = result.."\\""..v.."\\""\n        end\n        result = result..","\n    end\n    -- Remove leading commas from the result\n    if result ~= "" then\n        result = result:sub(1, result:len()-1)\n    end\n    return result.."}"\nend\nfunction round(x, n)\n    n = math.pow(10, n or 0)\n    x = x * n\n    if x >= 0 then x = math.floor(x + 0.5) else x = math.ceil(x - 0.5) end\n    return x / n\nend\nfunction insertBox()\n    -- Generate random numbers\n    local rand1 = math.random()\n    local rand2 = math.random()\n    local rand3 = math.random()\n    -- Generate random disturbances on position and orientation\n    local dx = (2*rand1-1)*0.1\n    local dy = (2*rand2-1)*0.1\n    local dphi = (2*rand3-1)*0.5\n    local disturbedCoordinates = {0,0,0}\n    disturbedCoordinates[1] = insertCoordinate[1]+dx\n    disturbedCoordinates[2] = insertCoordinate[2]+dy\n    disturbedCoordinates[3] = insertCoordinate[3]\n    -- Copy and paste box and boxDummy\n    local insertedObjects = sim.copyPasteObjects({box,boxDummy},0)\n    -- Update last inserted box time\n    T_last_inserted = sim.getSimulationTime()\n    -- Move and rotate\n    sim.setObjectPosition(insertedObjects[1],-1,disturbedCoordinates)\n    sim.setObjectOrientation(insertedObjects[1],-1,{0,0,dphi})\n    -- Store handles to boxes and dummies\n    table.insert(boxList,insertedObjects[1])\n    table.insert(boxDummyList,insertedObjects[2]) \n    -- Decide if object is good or bad\n    local decision = math.random() \n    if decision <= goodPercentage then\n    -- Object is good, assign goodColor\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,goodColor)\n        table.insert(boolList,true)\n    else\n    -- Object is bad, assign random color\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,{rand1,rand2,rand3})\n        table.insert(boolList,false)\n    end\nend\n-- See the user manual or the available code snippets for additional callback functions and details\n \n \n', 'tags': '', 'url': 'w15.html'}, {'title': 'w16', 'text': 'cd2022_w16_2b_part1.mp4 \xa0 (以下範例的 demo 說明) \n cd2022_w16_2b_part2.mp4 \xa0 (rotating cuboid 與 vision sensor 在 remote API 與網際介面環境下的應用) \n cd2022_w16_2b_part3.mp4 \xa0 (說明 CoppeliaSim 4.3.0 visualization stream 功能應用) \n CoppeliaSim Python remote API 範例: \n 利用 tkinter GUI 介面 slider 控制 uArm 機械手臂: \n w15_uarm_tkinter_control.7z \n \n 解開壓縮檔案. \n 以 CoppeliaSim 4.3.0 rev3 開啟 uarm_nx_tkinter_gui_control_exhaustive.simscene.xml 或 uarm_nx_tkinter_gui_control.ttt 場景後, Start Simulation. \n 以 SciTE 執行 uarm_tkinter_control.py, 可透過網路操控伺服器上的 uArm 機械手臂. \n \n 其中的 uarm_nx_tkinter_gui_control_exhaustive.simscene.xml 可以利用 Leo Editor 解讀, 並透過場景節點進行編輯, 以程式方法配置各節點的參數設定. \n 利用 OpenCV 擷取場景中的 Vision Sensor 串流影像: \n w15_rotating_cuboid.7z \n \n 解開壓縮檔案, 配合 rotating_cuboid.py 中的第 17 行, 修改 coppeliaSim.exe 所在目錄, 程式設定位於 C:/CoppeliaSimEdu_4.3.0_rev3 目錄中. \n 確定 coppeliaSim.exe 位置設定正確後, 以 SciTE 執行 rotating_cuboid.py, 將會以 headless 模式 (無 GUI 介面) 啟動 rotating_cuboid.ttt, 並將其中的兩個 Vision Sensor 串流影像取出播放. \n 操作者按下 p 鍵, 將會暫時 pause 場景模擬. \n 操作者按下 s 鍵, 將會重新啟動場景模擬. \n 操作者按下 e 鍵, 將會關閉 CoppeliaSim 與 Python 並退出模擬系統. \n rotating_cuboid.ttt 中控制 Cuboid 旋轉的程式採 Python scripting 格式編寫. \n \n 在 w15_rotating_cuboid 加入網際 Vision Sensor 串流, 使用者啟動後, 各用戶可以透過瀏覽器擷取場景中的串流影像: \n rotating_cuboid_flask.7z \n \n 解開壓縮檔案, 放入 rotating_cuboid 目錄中. \n 以 SciTE 開啟 rotating_cuboid_flask.py 執行後, 以 http://localhost:5000 擷取 Headless 場景中的影像畫面. \n 利用畫面中的連結選擇 camera1 或 camera2 畫面影像, 也可以利用 Pause 連結暫停模擬, 或以 Restart 連結重啟場景模擬. \n 由於未使用 AJAX 傳遞資料, 執行 camera 畫面切換或連結點擊, 瀏覽器畫面將會 refresh. \n \n', 'tags': '', 'url': 'w16.html'}, {'title': 'Online Exam', 'text': 'pdf檔案Onedrive下載: Online Exam \n \n 1.已知左側綠色底座的 uArm 機械手臂, 其基座座標原點位於絕對座標 (1.0, 0.25, 0), 啟動模擬後 green_suctionpad_frame 座標原點則位於 (0.22859, 0.26047, 0.36576), 請列出運算式說明, 啟動模擬後 joint1, joint2 與 joint3 分別以逆時針旋轉 5 度後, 求 green_suctionpad_frame 的絕對座標值. \n \n \n \n 分別利用程式控制joint1、2和3個逆時針轉5度後，點擊\xa0green_suctionpad_frame 零件查看它的座標值(x:+0.4888 y:+0.3053 z:+0.2593) \n 程式碼圖片: \n \n \n \n 2.已知左側 uarm 前方的紅色方塊頂端中心座標值為 (0.2, 0.4, 0.1), 請列出運算式說明左側 uarm 機械手臂的 joint1, joint2 與 joint3 該如何旋轉才能讓 end effector 的吸盤末端中心點移動至紅色方塊頂端中心? \n 先算出 joint1 需要轉動多少度才可再綠色底座的 uArm 機械手臂與紅色方塊構成的直線上。 \n \n \n 可利用三角形的餘弦定理公式c 2 =a 2 \xa0+ b 2 \xa0 − 2ab cos(C) ，從上視將綠色底座、紅色方塊、吸盤這三點構成一個三角形。然後利用點到點算出a、b、c之距離 (公式一如下)再使用餘弦公式可求出角度，而後再更改程式中轉一次的值，可以對到綠色底座的 uArm 機械 手臂與紅色方塊構成的直線上。 \n 公式一\xa0 ：\xa0\xa0 \n \n \n \n 但吸盤還未到達紅色方塊頂端中心，目前尚在想方法完成。但有試著利用手動 的方式將吸盤到達紅色方塊頂端中心。 \n \n', 'tags': '', 'url': 'Online Exam.html'}, {'title': '期末考週', 'text': '(1).利用\xa0 老師連結 \xa0目錄中的 uArm 機械手臂零件, 修改 "nx12絞鍊"與 "front joint" 零件的外型, 使能將 "Triangular connecting rod", "left link" 與 "end link" 等零組件, 與 "right crank" 與 "right link" 的組件左右互換. \n 心得：本次採用NX12來繪製修改零件，是運用老師之零件檔的草圖進行修改，在修改 nx12絞鍊時，因為是左右相反，所以有些草圖需要重新繪製，一邊看著原先的零件草圖一邊計算去完成繪製。 \n front joint修改影片 \n \n \n  接下來將 mp4 檔案從 downloads 目錄取出  \n \n \n \n   \n \n \n \n \n \n \n \n \n nx12絞鍊修改影片 \n \n \n  接下來將 mp4 檔案從 downloads 目錄取出  \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '期末考週.html'}]};